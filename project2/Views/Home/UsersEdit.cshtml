@{
    // View
    View = this;

    // Check action result
    if (usersEdit.ActionResult is EmptyResult) // Terminate page
        return;

    // Layout
    Layout = usersEdit.UseLayout ? "_Layout" : "";
}
@usersEdit.ShowPageHeader()
@usersEdit.ShowMessages()
<main class="edit">
<form name="fusersedit" id="fusersedit" class="@(usersEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
<script>
var currentTable = @Html.Raw(ConvertToJson(usersEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { users: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fusersedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fusersedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["user_id", [fields.user_id.visible && fields.user_id.required ? ew.Validators.required(fields.user_id.caption) : null], fields.user_id.isInvalid],
            ["_username", [fields._username.visible && fields._username.required ? ew.Validators.required(fields._username.caption) : null], fields._username.isInvalid],
            ["password", [fields.password.visible && fields.password.required ? ew.Validators.required(fields.password.caption) : null], fields.password.isInvalid],
            ["_email", [fields._email.visible && fields._email.required ? ew.Validators.required(fields._email.caption) : null], fields._email.isInvalid],
            ["user_level_id", [fields.user_level_id.visible && fields.user_level_id.required ? ew.Validators.required(fields.user_level_id.caption) : null], fields.user_level_id.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "user_level_id": @Html.Raw(usersEdit.user_level_id.ToClientList(usersEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@if (CurrentPage?.CheckToken ?? false) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(usersEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(usersEdit.OldKeyName)" value="@Html.Raw(usersEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (usersEdit.user_id.Visible) { // usersEdit.user_id.Visible (begin)
    <div id="r_user_id" @Html.Raw(usersEdit.user_id.RowAttributes)>
        <label id="elh_users_user_id" class="@(usersEdit.LeftColumnClass)">@Html.Raw(usersEdit.user_id.Caption)@Html.Raw(usersEdit.user_id.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersEdit.RightColumnClass)"><div @Html.Raw(usersEdit.user_id.CellAttributes)>
<span id="el_users_user_id">
<span @Html.Raw(usersEdit.user_id.ViewAttributes)>
<input type="text" readonly class="form-control-plaintext" value="@Html.Raw(RemoveHtml(ConvertToString(usersEdit.user_id.EditValue)))"></span>
<input type="hidden" data-table="users" data-field="x_user_id" data-hidden="1" name="x_user_id" id="x_user_id" value="@Html.Raw(HtmlEncode(usersEdit.user_id.CurrentValue))">
</span>
</div></div>
    </div>
} @* usersEdit.user_id.Visible (end) *@
@if (usersEdit._username.Visible) { // usersEdit._username.Visible (begin)
    <div id="r__username" @Html.Raw(usersEdit._username.RowAttributes)>
        <label id="elh_users__username" for="x__username" class="@(usersEdit.LeftColumnClass)">@Html.Raw(usersEdit._username.Caption)@Html.Raw(usersEdit._username.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersEdit.RightColumnClass)"><div @Html.Raw(usersEdit._username.CellAttributes)>
<span id="el_users__username">
<input type="@(usersEdit._username.InputTextType)" name="x__username" id="x__username" data-table="users" data-field="x__username" value="@Html.Raw(usersEdit._username.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(usersEdit._username.PlaceHolder))" data-format-pattern="@(usersEdit._username.FormatPattern)"@Html.Raw(usersEdit._username.EditAttributes) aria-describedby="x__username_help">
@Html.Raw(usersEdit._username.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(usersEdit._username.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* usersEdit._username.Visible (end) *@
@if (usersEdit.password.Visible) { // usersEdit.password.Visible (begin)
    <div id="r_password" @Html.Raw(usersEdit.password.RowAttributes)>
        <label id="elh_users_password" for="x_password" class="@(usersEdit.LeftColumnClass)">@Html.Raw(usersEdit.password.Caption)@Html.Raw(usersEdit.password.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersEdit.RightColumnClass)"><div @Html.Raw(usersEdit.password.CellAttributes)>
<span id="el_users_password">
<div class="input-group">
    <input type="password" name="x_password" id="x_password" autocomplete="new-password" data-field="x_password" value="@(usersEdit.password.EditValue)" size="30" maxlength="255" placeholder="@(HtmlEncode(usersEdit.password.PlaceHolder))"@Html.Raw(usersEdit.password.EditAttributes) aria-describedby="x_password_help">
    <button type="button" class="btn btn-default ew-toggle-password rounded-end" data-ew-action="password"><i class="fa-solid fa-eye"></i></button>
</div>
@Html.Raw(usersEdit.password.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(usersEdit.password.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* usersEdit.password.Visible (end) *@
@if (usersEdit._email.Visible) { // usersEdit._email.Visible (begin)
    <div id="r__email" @Html.Raw(usersEdit._email.RowAttributes)>
        <label id="elh_users__email" for="x__email" class="@(usersEdit.LeftColumnClass)">@Html.Raw(usersEdit._email.Caption)@Html.Raw(usersEdit._email.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersEdit.RightColumnClass)"><div @Html.Raw(usersEdit._email.CellAttributes)>
<span id="el_users__email">
<input type="@(usersEdit._email.InputTextType)" name="x__email" id="x__email" data-table="users" data-field="x__email" value="@Html.Raw(usersEdit._email.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(usersEdit._email.PlaceHolder))" data-format-pattern="@(usersEdit._email.FormatPattern)"@Html.Raw(usersEdit._email.EditAttributes) aria-describedby="x__email_help">
@Html.Raw(usersEdit._email.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(usersEdit._email.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* usersEdit._email.Visible (end) *@
@if (usersEdit.user_level_id.Visible) { // usersEdit.user_level_id.Visible (begin)
    <div id="r_user_level_id" @Html.Raw(usersEdit.user_level_id.RowAttributes)>
        <label id="elh_users_user_level_id" for="x_user_level_id" class="@(usersEdit.LeftColumnClass)">@Html.Raw(usersEdit.user_level_id.Caption)@Html.Raw(usersEdit.user_level_id.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersEdit.RightColumnClass)"><div @Html.Raw(usersEdit.user_level_id.CellAttributes)>
@if (!Security.IsAdmin && Security.IsLoggedIn) { // Non system admin
<span id="el_users_user_level_id">
<span class="form-control-plaintext">@Html.Raw(usersEdit.user_level_id.DisplayValue(usersEdit.user_level_id.EditValue))</span>
</span>
} else {
<span id="el_users_user_level_id">
    <select
        id="x_user_level_id"
        name="x_user_level_id"
        class="form-select ew-select@(usersEdit.user_level_id.IsInvalidClass)"
        data-select2-id="fusersedit_x_user_level_id"
        data-table="users"
        data-field="x_user_level_id"
        data-value-separator="@(usersEdit.user_level_id.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(usersEdit.user_level_id.PlaceHolder))"
        @Html.Raw(usersEdit.user_level_id.EditAttributes)>
        @(usersEdit.user_level_id.SelectOptionListHtml("x_user_level_id"))
    </select>
    @Html.Raw(usersEdit.user_level_id.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(usersEdit.user_level_id.GetErrorMessage())</div>
@Html.Raw(usersEdit.user_level_id.Lookup.GetParamTag(usersEdit, "p_x_user_level_id"))
<script>
loadjs.ready("fusersedit", function() {
    var options = { name: "x_user_level_id", selectId: "fusersedit_x_user_level_id" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fusersedit.lists.user_level_id?.lookupOptions.length) {
        options.data = { id: "x_user_level_id", form: "fusersedit" };
    } else {
        options.ajax = { id: "x_user_level_id", form: "fusersedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.users.fields.user_level_id.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
}
</div></div>
    </div>
} @* usersEdit.user_level_id.Visible (end) *@
</div><!-- /page* -->
@{ usersEdit.CloseRecordset(); }
@Html.Raw(usersEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(usersEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fusersedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fusersedit" data-href="@AppPath(usersEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(usersEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@usersEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("users");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
